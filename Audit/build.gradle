buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
        // gradle versions
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.19'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'com.google.protobuf' version '0.8.19'
}

group 'com.audit'
version '1.0'

repositories {
    mavenCentral()
}

def grpcVersion = '1.48.0'
def protobufVersion = '3.21.1'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation "javax.persistence:javax.persistence-api:2.2"
    compileOnly "org.projectlombok:lombok:1.18.24"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
    testImplementation 'io.grpc:grpc-testing:1.48.0'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

task prepareDirs {
    mustRunAfter clean
    doLast {
        mkdir "$rootDir/storage"
    }
}

tasks.each {
    if (it != prepareDirs && it != clean) {
        it.dependsOn prepareDirs
    }
}

startScripts.enabled = false

task auditService(type: CreateStartScripts) {
    mainClassName = 'com.audit.server.LogServer'
    applicationName = 'audit-service'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtimeClasspath
}

applicationDistribution.into('bin') {
    from(auditService)
    fileMode = 0755
}

test {
    useJUnitPlatform()
}

apply plugin: 'checkstyle'
checkstyle {
    toolVersion = "8.16"
    ignoreFailures = false
    showViolations = true
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}